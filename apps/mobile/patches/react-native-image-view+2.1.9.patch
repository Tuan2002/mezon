diff --git a/node_modules/react-native-image-view/src/ImageView.js b/node_modules/react-native-image-view/src/ImageView.js
index f0c1992..2ece98c 100644
--- a/node_modules/react-native-image-view/src/ImageView.js
+++ b/node_modules/react-native-image-view/src/ImageView.js
@@ -110,8 +110,9 @@ export default class ImageView extends Component<PropsType, StateType> {
         // calculate initial scale and translate for images
         const initialScreenDimensions = getScreenDimensions();
         this.imageInitialParams = props.images.map(image =>
-            getInitialParams(image, initialScreenDimensions)
+          getInitialParams(image, initialScreenDimensions)
         );
+        this.onChangeDimension = this.onChangeDimension.bind(this);
 
         this.state = {
             images: props.images,
@@ -142,53 +143,53 @@ export default class ImageView extends Component<PropsType, StateType> {
         this.imageTranslateValue = new Animated.ValueXY({x, y});
 
         this.panResponder = generatePanHandlers(
-            (event: EventType): void => this.onGestureStart(event.nativeEvent),
-            (event: EventType, gestureState: GestureState): void =>
-                this.onGestureMove(event.nativeEvent, gestureState),
-            (event: EventType, gestureState: GestureState): void =>
-                this.onGestureRelease(event.nativeEvent, gestureState)
+          (event: EventType): void => this.onGestureStart(event.nativeEvent),
+          (event: EventType, gestureState: GestureState): void =>
+            this.onGestureMove(event.nativeEvent, gestureState),
+          (event: EventType, gestureState: GestureState): void =>
+            this.onGestureRelease(event.nativeEvent, gestureState)
         );
 
         const imagesWithoutSize = getImagesWithoutSize(
-            addIndexesToImages(props.images)
+          addIndexesToImages(props.images)
         );
 
         if (imagesWithoutSize.length) {
             Promise.all(fetchImageSize(imagesWithoutSize)).then(
-                this.setSizeForImages
+              this.setSizeForImages
             );
         }
     }
 
     componentDidMount() {
         styles = createStyles(this.state.screenDimensions);
-        Dimensions.addEventListener('change', this.onChangeDimension);
+        this.dimensionListener = Dimensions.addEventListener('change', this.onChangeDimension);
     }
 
     componentDidUpdate() {
         const {images, imageIndex, isVisible} = this.state;
 
         if (
-            typeof this.props.isVisible !== 'undefined' &&
-            this.props.isVisible !== isVisible
+          typeof this.props.isVisible !== 'undefined' &&
+          this.props.isVisible !== isVisible
         ) {
             this.onNextImagesReceived(this.props.images, this.props.imageIndex);
 
             if (
-                images !== this.props.images ||
-                imageIndex !== this.props.imageIndex
+              images !== this.props.images ||
+              imageIndex !== this.props.imageIndex
             ) {
                 const imagesWithoutSize = getImagesWithoutSize(
-                    addIndexesToImages(this.props.images)
+                  addIndexesToImages(this.props.images)
                 );
 
                 if (imagesWithoutSize.length) {
                     Promise.all(fetchImageSize(imagesWithoutSize)).then(
-                        updatedImages =>
-                            this.onNextImagesReceived(
-                                this.setSizeForImages(updatedImages),
-                                this.props.imageIndex
-                            )
+                      updatedImages =>
+                        this.onNextImagesReceived(
+                          this.setSizeForImages(updatedImages),
+                          this.props.imageIndex
+                        )
                     );
                 }
             }
@@ -210,8 +211,9 @@ export default class ImageView extends Component<PropsType, StateType> {
     }
 
     componentWillUnmount() {
-        Dimensions.removeEventListener('change', this.onChangeDimension);
-
+        if (this.dimensionListener) {
+            this.dimensionListener.remove();
+        }
         if (this.glideAlwaysTimer) {
             clearTimeout(this.glideAlwaysTimer);
         }
@@ -231,7 +233,7 @@ export default class ImageView extends Component<PropsType, StateType> {
 
     onNextImagesReceived(images: Array<ImageType>, imageIndex: number = 0) {
         this.imageInitialParams = images.map(image =>
-            getInitialParams(image, this.state.screenDimensions)
+          getInitialParams(image, this.state.screenDimensions)
         );
         const {scale, translate} = this.imageInitialParams[imageIndex] || {
             scale: 1,
@@ -278,11 +280,11 @@ export default class ImageView extends Component<PropsType, StateType> {
         const {x} = event.nativeEvent.contentOffset || {x: 0};
 
         const nextImageIndex = Math.round(
-            x / this.state.screenDimensions.screenWidth
+          x / this.state.screenDimensions.screenWidth
         );
 
         this.isScrolling =
-            Math.ceil(x) % this.state.screenDimensions.screenWidth > 10;
+          Math.ceil(x) % this.state.screenDimensions.screenWidth > 10;
 
         if (imageIndex !== nextImageIndex && nextImageIndex >= 0) {
             const nextImageScale = this.getInitialScale(nextImageIndex);
@@ -348,17 +350,17 @@ export default class ImageView extends Component<PropsType, StateType> {
 
         // if image not scaled and fits to the screen
         if (
-            isSwipeCloseEnabled &&
-            scalesAreEqual(imageScale, imageInitialScale) &&
-            height * imageInitialScale < screenHeight
+          isSwipeCloseEnabled &&
+          scalesAreEqual(imageScale, imageInitialScale) &&
+          height * imageInitialScale < screenHeight
         ) {
             const backgroundOpacity = Math.abs(
-                dy * BACKGROUND_OPACITY_MULTIPLIER
+              dy * BACKGROUND_OPACITY_MULTIPLIER
             );
 
             this.imageTranslateValue.y.setValue(y + dy);
             this.modalBackgroundOpacity.setValue(
-                backgroundOpacity > 1 ? 1 : backgroundOpacity
+              backgroundOpacity > 1 ? 1 : backgroundOpacity
             );
         }
 
@@ -430,8 +432,8 @@ export default class ImageView extends Component<PropsType, StateType> {
                 this.doubleTapTimer = null;
 
                 scale = scalesAreEqual(imageInitialScale, scale)
-                    ? scale * SCALE_MAX_MULTIPLIER
-                    : imageInitialScale;
+                  ? scale * SCALE_MAX_MULTIPLIER
+                  : imageInitialScale;
 
                 Animated.timing(this.imageScaleValue, {
                     toValue: scale,
@@ -449,34 +451,34 @@ export default class ImageView extends Component<PropsType, StateType> {
 
         const {x, y} = this.calculateNextTranslate(dx, dy, scale);
         const scrollEnabled =
-            scale === this.getInitialScale() &&
-            x === imageInitialTranslate.x &&
-            y === imageInitialTranslate.y;
+          scale === this.getInitialScale() &&
+          x === imageInitialTranslate.x &&
+          y === imageInitialTranslate.y;
 
         Animated.parallel(
-            [
-                modalBackgroundOpacity > 0
-                    ? Animated.timing(this.modalBackgroundOpacity, {
-                          toValue: 0,
-                          duration: 100,
-                      })
-                    : null,
-                Animated.timing(this.imageTranslateValue.x, {
-                    toValue: x,
-                    duration: 100,
-                }),
-                Animated.timing(this.imageTranslateValue.y, {
-                    toValue: y,
+          [
+              modalBackgroundOpacity > 0
+                ? Animated.timing(this.modalBackgroundOpacity, {
+                    toValue: 0,
                     duration: 100,
-                }),
-            ].filter(Boolean)
+                })
+                : null,
+              Animated.timing(this.imageTranslateValue.x, {
+                  toValue: x,
+                  duration: 100,
+              }),
+              Animated.timing(this.imageTranslateValue.y, {
+                  toValue: y,
+                  duration: 100,
+              }),
+          ].filter(Boolean)
         ).start();
 
         // Close modal with animation if image not scaled and high vertical gesture speed
         if (
-            isSwipeCloseEnabled &&
-            scale === imageInitialScale &&
-            Math.abs(vy) >= IMAGE_SPEED_FOR_CLOSE
+          isSwipeCloseEnabled &&
+          scale === imageInitialScale &&
+          Math.abs(vy) >= IMAGE_SPEED_FOR_CLOSE
         ) {
             Animated.timing(this.imageTranslateValue.y, {
                 toValue: y + 400 * vy,
@@ -532,8 +534,8 @@ export default class ImageView extends Component<PropsType, StateType> {
     }
 
     getImageStyle(
-        image: ImageType,
-        index: number
+      image: ImageType,
+      index: number
     ): {width?: number, height?: number, transform?: any, opacity?: number} {
         const {imageIndex, screenDimensions} = this.state;
         const {width, height} = image;
@@ -544,21 +546,21 @@ export default class ImageView extends Component<PropsType, StateType> {
 
         // very strange caching, fix it with changing size to 1 pixel
         const {x, y} = calculateInitialTranslate(
-            width,
-            height + 1,
-            screenDimensions
+          width,
+          height + 1,
+          screenDimensions
         );
         const translateValue = new Animated.ValueXY({x, y});
 
         const transform =
-            index === imageIndex
-                ? this.imageTranslateValue.getTranslateTransform()
-                : translateValue.getTranslateTransform();
+          index === imageIndex
+            ? this.imageTranslateValue.getTranslateTransform()
+            : translateValue.getTranslateTransform();
 
         const scale =
-            index === imageIndex
-                ? this.imageScaleValue
-                : this.getInitialScale(index);
+          index === imageIndex
+            ? this.imageScaleValue
+            : this.getInitialScale(index);
         // $FlowFixMe
         transform.push({scale});
 
@@ -597,7 +599,7 @@ export default class ImageView extends Component<PropsType, StateType> {
 
         return images.map((image, index) => {
             const nextImageSize = nextImages.find(
-                nextImage => nextImage.index === index
+              nextImage => nextImage.index === index
             );
 
             /* eslint-disable */
@@ -646,9 +648,9 @@ export default class ImageView extends Component<PropsType, StateType> {
     panResponder: *;
 
     calculateNextTranslate(
-        dx: number,
-        dy: number,
-        scale: number
+      dx: number,
+      dy: number,
+      scale: number
     ): {x: number, y: number} {
         const {
             images,
@@ -675,8 +677,8 @@ export default class ImageView extends Component<PropsType, StateType> {
                     nextTranslate = (screenSize - imageSize) / 2;
                 } else {
                     nextTranslate =
-                        screenSize / 2 -
-                        (imageSize * (scale / imageInitialScale)) / 2;
+                      screenSize / 2 -
+                      (imageSize * (scale / imageInitialScale)) / 2;
                 }
 
                 return nextTranslate;
@@ -698,9 +700,9 @@ export default class ImageView extends Component<PropsType, StateType> {
 
     togglePanels(isVisible?: boolean) {
         const panelsVisible =
-            typeof isVisible !== 'undefined'
-                ? isVisible
-                : !this.state.panelsVisible;
+          typeof isVisible !== 'undefined'
+            ? isVisible
+            : !this.state.panelsVisible;
         // toggle footer and header
         this.setState({panelsVisible});
 
@@ -720,7 +722,7 @@ export default class ImageView extends Component<PropsType, StateType> {
     }
 
     listKeyExtractor = (image: ImageType): string =>
-        this.state.images.indexOf(image).toString();
+      this.state.images.indexOf(image).toString();
 
     close = () => {
         this.setState({isVisible: false});
@@ -734,19 +736,19 @@ export default class ImageView extends Component<PropsType, StateType> {
         const loaded = image.loaded && image.width && image.height;
 
         return (
-            <View
-                style={styles.imageContainer}
-                onStartShouldSetResponder={(): boolean => true}
-            >
-                <Animated.Image
-                    resizeMode="cover"
-                    source={image.source}
-                    style={this.getImageStyle(image, index)}
-                    onLoad={(): void => this.onImageLoaded(index)}
-                    {...this.panResponder.panHandlers}
-                />
-                {!loaded && <ActivityIndicator style={styles.loading} />}
-            </View>
+          <View
+            style={styles.imageContainer}
+            onStartShouldSetResponder={(): boolean => true}
+          >
+              <Animated.Image
+                resizeMode="contain"
+                source={image.source}
+                style={this.getImageStyle(image, index)}
+                onLoad={(): void => this.onImageLoaded(index)}
+                {...this.panResponder.panHandlers}
+              />
+              {!loaded && <ActivityIndicator style={styles.loading} />}
+          </View>
         );
     };
 
@@ -765,84 +767,84 @@ export default class ImageView extends Component<PropsType, StateType> {
         const headerTranslate = this.headerTranslateValue.getTranslateTransform();
         const footerTranslate = this.footerTranslateValue.getTranslateTransform();
         const rgbBackgroundColor =
-            backgroundColor && isHex(backgroundColor)
-                ? hexToRgb(backgroundColor)
-                : defaultBackgroundColor;
+          backgroundColor && isHex(backgroundColor)
+            ? hexToRgb(backgroundColor)
+            : defaultBackgroundColor;
         const rgb = rgbBackgroundColor.join(',');
         const animatedBackgroundColor = this.modalBackgroundOpacity.interpolate(
-            {
-                inputRange: [0, 1],
-                outputRange: [`rgba(${rgb}, 0.9)`, `rgba(${rgb}, 0.2)`],
-            }
+          {
+              inputRange: [0, 1],
+              outputRange: [`rgba(${rgb}, 0.9)`, `rgba(${rgb}, 0.2)`],
+          }
         );
 
         const isPrevVisible =
-            imageScale === imageInitialScale && imageIndex > 0;
+          imageScale === imageInitialScale && imageIndex > 0;
         const isNextVisible =
-            imageScale === imageInitialScale && imageIndex < images.length - 1;
+          imageScale === imageInitialScale && imageIndex < images.length - 1;
 
         return (
-            <Modal
-                transparent
-                visible={isVisible}
-                animationType={animationType}
-                onRequestClose={this.close}
-                supportedOrientations={['portrait', 'landscape']}
-            >
-                <Animated.View
-                    style={[
-                        {backgroundColor: animatedBackgroundColor},
-                        styles.underlay,
-                    ]}
-                />
+          <Modal
+            transparent={Platform.OS === 'android'}
+            visible={isVisible}
+            animationType={animationType}
+            onRequestClose={this.close}
+            supportedOrientations={['portrait', 'landscape']}
+          >
+              <Animated.View
+                style={[
+                    {backgroundColor: animatedBackgroundColor},
+                    styles.underlay,
+                ]}
+              />
+              <Animated.View
+                style={[
+                    styles.header,
+                    {
+                        transform: headerTranslate,
+                    },
+                ]}
+              >
+                  <SafeAreaView style={{flex: 1}}>
+                      {!!close &&
+                        React.createElement(close, {onPress: this.close})}
+                  </SafeAreaView>
+              </Animated.View>
+              <FlatList
+                horizontal
+                pagingEnabled
+                data={images}
+                scrollEnabled={scrollEnabled}
+                scrollEventThrottle={16}
+                style={styles.container}
+                ref={this.onFlatListRender}
+                renderSeparator={() => null}
+                keyExtractor={this.listKeyExtractor}
+                onScroll={this.onNextImage}
+                renderItem={this.renderImage}
+                getItemLayout={this.getItemLayout}
+                onMomentumScrollBegin={this.onMomentumScrollBegin}
+                onMomentumScrollEnd={this.onMomentumScrollEnd}
+              />
+              {prev &&
+                isPrevVisible &&
+                React.createElement(prev, {onPress: this.scrollToPrev})}
+              {next &&
+                isNextVisible &&
+                React.createElement(next, {onPress: this.scrollToNext})}
+              {renderFooter && (
                 <Animated.View
-                    style={[
-                        styles.header,
-                        {
-                            transform: headerTranslate,
-                        },
-                    ]}
+                  style={[styles.footer, {transform: footerTranslate}]}
+                  onLayout={event => {
+                      this.footerHeight = event.nativeEvent.layout.height;
+                  }}
                 >
-                    <SafeAreaView style={{flex: 1}}>
-                        {!!close &&
-                            React.createElement(close, {onPress: this.close})}
-                    </SafeAreaView>
+                    {typeof renderFooter === 'function' &&
+                      images[imageIndex] &&
+                      renderFooter(images[imageIndex])}
                 </Animated.View>
-                <FlatList
-                    horizontal
-                    pagingEnabled
-                    data={images}
-                    scrollEnabled={scrollEnabled}
-                    scrollEventThrottle={16}
-                    style={styles.container}
-                    ref={this.onFlatListRender}
-                    renderSeparator={() => null}
-                    keyExtractor={this.listKeyExtractor}
-                    onScroll={this.onNextImage}
-                    renderItem={this.renderImage}
-                    getItemLayout={this.getItemLayout}
-                    onMomentumScrollBegin={this.onMomentumScrollBegin}
-                    onMomentumScrollEnd={this.onMomentumScrollEnd}
-                />
-                {prev &&
-                    isPrevVisible &&
-                    React.createElement(prev, {onPress: this.scrollToPrev})}
-                {next &&
-                    isNextVisible &&
-                    React.createElement(next, {onPress: this.scrollToNext})}
-                {renderFooter && (
-                    <Animated.View
-                        style={[styles.footer, {transform: footerTranslate}]}
-                        onLayout={event => {
-                            this.footerHeight = event.nativeEvent.layout.height;
-                        }}
-                    >
-                        {typeof renderFooter === 'function' &&
-                            images[imageIndex] &&
-                            renderFooter(images[imageIndex])}
-                    </Animated.View>
-                )}
-            </Modal>
+              )}
+          </Modal>
         );
     }
 }
