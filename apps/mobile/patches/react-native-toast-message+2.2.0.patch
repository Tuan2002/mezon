diff --git a/node_modules/react-native-toast-message/lib/src/components/AnimatedContainer.js b/node_modules/react-native-toast-message/lib/src/components/AnimatedContainer.js
index 1d469fd..36ffd78 100644
--- a/node_modules/react-native-toast-message/lib/src/components/AnimatedContainer.js
+++ b/node_modules/react-native-toast-message/lib/src/components/AnimatedContainer.js
@@ -27,15 +27,19 @@ export function dampingFor(gesture, position) {
 }
 export function animatedValueFor(gesture, position, damping) {
     const boundValue = (val) => bound(val, 0, 2);
-    const { dy } = gesture;
+    const { dy, numberActiveTouches } = gesture;  // use numberActiveTouches
+
     switch (position) {
         case 'bottom':
+            if (!numberActiveTouches) return boundValue(0) // add this
             return boundValue(1 - dy / damping);
         case 'top':
+            if (!numberActiveTouches) return boundValue(0) // add this
             return boundValue(1 + dy / damping);
         default:
             throw new Error(`Toast position: ${position} not implemented`);
     }
+
 }
 export function AnimatedContainer({ children, isVisible, position, topOffset, bottomOffset, keyboardOffset, onHide, onRestorePosition = noop, swipeable }) {
     const { log } = useLogger();
@@ -74,9 +78,9 @@ export function AnimatedContainer({ children, isVisible, position, topOffset, bo
         animate(newAnimationValue);
     }, [animate, isVisible]);
     return (<Animated.View testID={getTestId('AnimatedContainer')} onLayout={computeViewDimensions} style={[styles.base, styles[position], animationStyles]}
-    // This container View is never the target of touch events but its subviews can be.
-    // By doing this, tapping buttons behind the Toast is allowed
-    pointerEvents={isVisible ? 'box-none' : 'none'} {...panResponder.panHandlers}>
-      {children}
+        // This container View is never the target of touch events but its subviews can be.
+        // By doing this, tapping buttons behind the Toast is allowed
+        pointerEvents={isVisible ? 'box-none' : 'none'} {...panResponder.panHandlers}>
+        {children}
     </Animated.View>);
 }
\ No newline at end of file
